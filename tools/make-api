#!/usr/bin/env node
/*
    api [--schema schema] input.json5 output.json5 [doc/dir]
 */

    var Fs = require('fs')
    var Path = require('path')
    
    const URL = ''
    const Tab = 4
    const Space = '                                                                                                  '
    const Roles = ["user", "device", "admin", "owner", "support", "service", "super"]
    const Query = {
        filter: {type: 'string', notes: 'Simple filter string to filter'},
        hidden: {type: 'boolean', notes: 'Return hidden fields', private : true},
        next: {type: 'object', notes: 'Pagination token for the next page'},
        prev: {type: 'object', notes: 'Pagination token for the previous page'},
        limit: {type: 'number', notes: 'Number of items to retrieve. Defaults to 1.'},
        index: {type: 'string', role: 'support', notes: 'Database index to use'},
        offset: {type: 'number'},
        where: {type: 'string', role: 'support', notes: 'Where clause to filter'},
        exists: {type: 'boolean', notes: 'Set to true to require the item exists, otherwise null'},
    }
    const SupportQuery = {
        filter: {type: 'string'},
        hidden: {type: 'boolean'},
        next: {type: 'object', role: 'support'},
        prev: {type: 'object', role: 'support'},
        limit: {type: 'number', role: 'support'},
        index: {type: 'string', role: 'support'},
        where: {type: 'string', role: 'support'},
        exists: {type: 'boolean'},
    }
    const Match = {
        cloud: /^[^~`!@#$%^&\*(){}\[\]|\\\/:;,?=+]+$/,
        email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        name: /^[^<>~`!@#$%^&\*(){}\[\]|\\\/:;?=+]+$/,
        role: /^user|admin|owner|support|super$/,
        simpleName: /^[a-zA-Z0-9 ]+$/,
        ulid: /^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$/,
    }
    
    function print(...args) {
        console.log(...args)
    }
    
    function dump(...args) { 
        for (let item of args) print(JSON.stringify(item, null, 4)) 
    }
    
    function json5(file) {
        let obj
        let home = process.cwd()
        let dir = Path.dirname(file)
        if (dir) {
            process.chdir(dir)
            file = Path.basename(file)
        }
        let data = 'obj = ' + Fs.readFileSync(file, 'utf8')
        try {
            eval(data)
        } catch (err) {
            console.error('Cannot parse', file, err.message)
            process.exit(2)
        }
        process.chdir(home)
        return obj
    }
    
    let args = process.argv.slice(2)
    let i = 0
    
    for (i = 0; i < args.length; i++) {
        let arg = args[i]
        if (arg == '--schema') {
            global.Schema = json5(args[++i])
        } else {
            break
        }
    }
    let [input, output, doc] = args.slice(i)
    
    if (!input || !output) {
        console.error(`Usage: api [--schema schema] input.js output.json doc/dir`)
        process.exit(2)
    }
    
    async function main() {
        let path = Path.join(process.cwd(), input)
        makeOutput(json5(path))
        if (doc) {
            makeDoc(api)
        }
    }
    
    function tab(indent) {
        return Space.slice(0, indent)
    }
    
    function emitField(modelName, model, method, section, block, indent = 0) {
        if (!block) {
            if (!(section == 'response' && block === null)) {
                console.error(`Missing ${section} block for ${modelName}.${method.name}`)
            }
            return tab(indent) + `"${section}": null`
        }
        let lines = []
    
        indent += Tab
    
        if (typeof block != 'object') {
            lines = JSON.stringify(block)
        } else {
            for (let [name, field] of Object.entries(block)) {
                field.name = name
                indent += Tab
    
                let options = []
                if (field.type) {
                    options.push(`"type": "${field.type}"`)
                }
                let task = field.task || field.role
                if (task !== undefined) {
                    if (task == null) {
                        options.push(`"task": null`)
                    } else {
                        options.push(`"task": "${task}"`)
                    }
                } else {
                    // console.error(`Model ${modelName}.${method.name}.${field.name} is missing a role`)
                }
                if (field.required) {
                    options.push('"required": true')
                }
                if (field.discard) {
                    options.push('"discard": true')
                }
                if (field.validate) {
                    options.push(`"validate": ${JSON.stringify(field.validate.source)}`)
                }
                if (field.schema) {
                    options.push(`\n${emitField(modelName, model, method, 'schema', field.schema, indent)}\n`)
                }
                options = options.map(o => tab(indent) + o)
                indent -= Tab
    
                if (options.length) {
                    lines.push(tab(indent) + `"${field.name}": {\n` + options.join(',\n') + '\n' + tab(indent) + '}')
                } else {
                    lines.push(tab(indent) + `"${field.name}": {}`)
                }
            }
        }
        indent -= Tab
        if (Array.isArray(lines) && lines.length) {
            return tab(indent) + `"${section}": {\n` + lines.join(',\n') + '\n' + tab(indent) + '}'
        } else if (typeof lines == 'string') {
            return tab(indent) + `"${section}": ` + lines
        } else {
            return tab(indent) + `"${section}": {}`
        }
    }
    
    function emitSchema(modelName, model, indent = 0)
    {
        let lines = []
        for (let [name, method] of Object.entries(model.methods)) {
            method.name = name
            let items = []
    
            let modelTask = model.task || model.role 
            let task = method.task || method.role
            if (modelTask !== undefined && task === undefined) {
                task = modelTask
            }
            if (model.paged && method.paged === undefined) {
                method.paged = model.paged
            }
            if (task === undefined) {
                console.error(`Missing task for ${modelName}.${name}`)
            } else if (task == null) {
                items.push(`${tab(indent + Tab)}"task": null`)
            } else {
                items.push(`${tab(indent + Tab)}"task": "${task}"`)
            }
            items.push(emitField(modelName, model, method, 'request', method.request, indent + Tab))
            if (method.response !== undefined) {
                items.push(emitField(modelName, model, method, 'response', method.response, indent + Tab))
            }
            if (method.query) {
                items.push(emitField(modelName, model, method, 'query', method.query, indent + Tab))
            }
            if (method.paged) {
                items.push(`${tab(indent + Tab)}"paged": true`)
            }
            if (method.log != null) {
                items.push(`${tab(indent + Tab)}"log": ${method.log}`)
            }
            if (items.length) {
                lines.push(tab(indent) + `"${method.name}": {\n` + items.join(',\n') + '\n' + tab(indent) + '}')
            } else {
                lines.push(tab(indent) + `"${method.name}": {}`)
            }
        }
        return lines.join(',\n')
    }
    
    function makeOutput(API) {
        let lines = []
        let indent = Tab
        for (let [name, model] of Object.entries(API)) {
            lines.push(tab(indent) + `"${name}": {\n` + emitSchema(name, model, indent + Tab) + '\n' + tab(indent) + '}')
        }
        let data = '{\n' + lines.join(',\n') + '\n}\n'
        try {
            let old = Fs.readFileSync(output).toString()
            if (data == old) {
                return
            }
        } catch (err) { }
        print('  [Exported]', Path.basename(output))
        Fs.writeFileSync(output, data)
    }
    
    function title(name) {
        return name[0].toUpperCase() + name.slice(1)
    }
    
    function addStop(s) {
        return (s + '.').replace(/\.\.$/, '.')
    }
    
    function makeDoc(API) {
        for (let [modelName, model] of Object.entries(API)) {
            if (model.private == true) continue
            let buf = []
    
            buf.push(`# ${title(modelName)}\n`)
    
            if (model.description) {
                buf.push(addStop(model.description) + '\n')
            }
    
            for (let [methodName, method] of Object.entries(model.methods)) {
                if (method.private == true) continue
    
                let task = method.task || method.role
                if (Roles.indexOf(task) > Roles.indexOf('owner')) {
                    continue
                }
                buf.push('---\n')
                buf.push(`## ${title(methodName)}`)
                if (method.title) {
                    buf.push(`**${method.title}**\n`)
                }
                if (method.description) {
                    buf.push(addStop(method.description) + '\n')
                }
                if (method.notes) {
                    // buf.push(`**Notes**:\n`)
                    buf.push(addStop(method.notes) + '\n')
                }
                // buf.push(`**Endpoint**: ${method.method || 'POST'} ${URL}/${modelName}/${methodName}\n`)
                buf.push(`**Endpoint**\n`)
                buf.push(`    ${method.method || 'POST'} ${URL}/${modelName}/${methodName}\n`)
    
                buf.push(`**Authorized Role/Capability**\n`)
                buf.push(`    ${task || 'anyone'}\n`)
    
                if (method.request && Object.keys(method.request).length) {
                    buf.push(`**JSON Body Fields**\n`)
                    buf.push(`Field | Type | Required | Notes `)
                    buf.push(`- | - | - | -`)
                    for (let [fieldName, field] of Object.entries(method.request)) {
                        if (field.discard || field.private) {
                            continue
                        }
                        buf.push(`${fieldName} | ${field.type || 'any'} | ${field.required ? 'yes' : ''} | ${field.notes || ''}`)
                    }
                    buf.push('')
                }
                if (method.response) {
                    if (typeof method.response == 'object') {
                        buf.push(`**Response**\n`)
                        if (method.returns) {
                            buf.push(addStop(method.returns) + '\n')
                        }
                        buf.push(`Field | Type | Notes`)
                        if (Object.keys(method.response).length) {
                            buf.push(`- | - | -`)
                            for (let [fieldName, field] of Object.entries(method.response)) {
                                if (fieldName == 'pk' || fieldName == 'sk' || fieldName == 'gs1pk' || fieldName == 'gs1sk') {
                                    continue
                                }
                                if (field.discard || field.private) {
                                    continue
                                }
                                let task = field.task || field.role
                                if (Roles.indexOf(task) > Roles.indexOf('owner')) {
                                    continue
                                }
                                buf.push(`${fieldName} | ${field.type || 'any'} | ${field.notes || ''}`)
                            }
                            buf.push('')
                        } else {
                            buf.push(`- | - `)
                            buf.push('')
                        }
                    } else {
                        buf.push(`**Response**\n`)
                        if (method.returns) {
                            buf.push(addStop(method.returns) + '\n')
                        }
                        if (method.response != 'object') {
                            buf.push(method.response)
                        }
                        buf.push('')
                    }
    
                } else if (method.returns) {
                    buf.push(`**Response**\n`)
                    buf.push(addStop(method.returns) + '\n')
                    buf.push('')
                }
    
                if (method.query && Object.keys(method.query).length && ordinaryQuery(method.query)) {
                    buf.push(`**Query Path**\n`)
                    buf.push(`Field | Type | Notes`)
                    buf.push(`- | - | -`)
                    for (let [fieldName, field] of Object.entries(method.query)) {
                        if (field.discard || field.private) {
                            continue
                        }
                        buf.push(`${fieldName} | ${field.type || 'any'} | ${field.notes || ''}`)
                    }
                    buf.push('')
                }
                buf.push('')
            }
            let path = Path.join(doc, modelName + '.md')
            Fs.writeFileSync(path, buf.join('\n') + '\n')
        }
    }
    
    function ordinaryQuery(query) {
        for (let [fieldName, field] of Object.entries(query)) {
            let task = field.task || field.role
            if (Roles.indexOf(task) <= Roles.indexOf('owner')) {
                return true
            }
        }
        return false
    }
    
    main()