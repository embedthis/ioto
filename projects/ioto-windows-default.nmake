#
#   ioto-windows-default.nmake -- Makefile to build Ioto for windows
#

NAME                  = ioto
VERSION               = 1.0.0

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
PROJECT               = ioto-windows-default

!IFNDEF PROFILE
PROFILE               = dev
!ENDIF

!IF "$(PA)" == "AMD64"
ARCH                  = x64
CC_ARCH               = x86_64
ENTRY                 = _DllMainCRTStartup
!ELSEIF "$(PA)" == "ARM64"
ARCH                  = arm64
CC_ARCH               = aarch64
ENTRY                 = _DllMainCRTStartup@12
!ELSEIF "$(PA)" == "ARM"
ARCH                  = arm
CC_ARCH               = arm
ENTRY                 = _DllMainCRTStartup@12
!ELSEIF "$(PA)" == "X86"
ARCH                  = x86
CC_ARCH               = i686
ENTRY                 = _DllMainCRTStartup@12
!ELSE
ARCH                  = x64
CC_ARCH               = x86_64
ENTRY                 = _DllMainCRTStartup
!ENDIF

!IFNDEF CONFIG
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IFNDEF BUILD
BUILD                 = build
!ENDIF

!IFNDEF LBIN
LBIN                  = $(BUILD)/bin
!ENDIF

#
# Components
#
!IFNDEF ME_COM_COMPILER
ME_COM_COMPILER       = 1
!ENDIF
!IFNDEF ME_COM_LIB
ME_COM_LIB            = 1
!ENDIF
!IFNDEF ME_COM_LINK
ME_COM_LINK           = 1
!ENDIF
!IFNDEF ME_COM_MBEDTLS
ME_COM_MBEDTLS        = 0
!ENDIF
!IFNDEF ME_COM_OPENSSL
ME_COM_OPENSSL        = 1
!ENDIF
!IFNDEF ME_COM_RC
ME_COM_RC             = 1
!ENDIF
!IFNDEF ME_COM_SSL
ME_COM_SSL            = 1
!ENDIF
!IFNDEF ME_COM_VXWORKS
ME_COM_VXWORKS        = 0
!ENDIF

!IFNDEF ME_COM_MBEDTLS_PATH
ME_COM_MBEDTLS_PATH   = .
!ENDIF
!IFNDEF ME_COM_OPENSSL_PATH
ME_COM_OPENSSL_PATH   = $(USERPROFILE)/vcpkg/installed/x64-windows
!ENDIF

!IF "$(ME_COM_LIB)" == "1"
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_LINK)" == "1"
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_MBEDTLS)" == "1"
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_OPENSSL)" == "1"
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_RC)" == "1"
ME_COM_COMPILER       = 1
!ENDIF


#
# Settings
#
!IFNDEF ME_APP
ME_APP                = \"unit\"
!ENDIF
!IFNDEF ME_AUTHOR
ME_AUTHOR             = \"Embedthis Software.\"
!ENDIF
!IFNDEF ME_BUILD
ME_BUILD              = \"build\"
!ENDIF
!IFNDEF ME_COM_CRYPT
ME_COM_CRYPT          = 1
!ENDIF
!IFNDEF ME_COM_DB
ME_COM_DB             = 1
!ENDIF
!IFNDEF ME_COM_JSON
ME_COM_JSON           = 1
!ENDIF
!IFNDEF ME_COM_MQTT
ME_COM_MQTT           = 1
!ENDIF
!IFNDEF ME_COM_OPENAI
ME_COM_OPENAI         = 1
!ENDIF
!IFNDEF ME_COM_R
ME_COM_R              = 1
!ENDIF
!IFNDEF ME_COM_UCTX
ME_COM_UCTX           = 1
!ENDIF
!IFNDEF ME_COM_URL
ME_COM_URL            = 1
!ENDIF
!IFNDEF ME_COM_WEB
ME_COM_WEB            = 1
!ENDIF
!IFNDEF ME_COM_WEBSOCK
ME_COM_WEBSOCK        = 1
!ENDIF
!IFNDEF ME_COMPANY
ME_COMPANY            = \"embedthis\"
!ENDIF
!IFNDEF ME_COMPATIBLE
ME_COMPATIBLE         = \"1.0\"
!ENDIF
!IFNDEF ME_COMPILER_FORTIFY
ME_COMPILER_FORTIFY   = 1
!ENDIF
!IFNDEF ME_COMPILER_HAS_ATOMIC
ME_COMPILER_HAS_ATOMIC = 0
!ENDIF
!IFNDEF ME_COMPILER_HAS_ATOMIC64
ME_COMPILER_HAS_ATOMIC64 = 0
!ENDIF
!IFNDEF ME_COMPILER_HAS_DYN_LOAD
ME_COMPILER_HAS_DYN_LOAD = 1
!ENDIF
!IFNDEF ME_COMPILER_HAS_LIB_EDIT
ME_COMPILER_HAS_LIB_EDIT = 0
!ENDIF
!IFNDEF ME_COMPILER_HAS_LIB_RT
ME_COMPILER_HAS_LIB_RT = 0
!ENDIF
!IFNDEF ME_COMPILER_HAS_MMU
ME_COMPILER_HAS_MMU   = 1
!ENDIF
!IFNDEF ME_COMPILER_HAS_STACK_PROTECTOR
ME_COMPILER_HAS_STACK_PROTECTOR = 0
!ENDIF
!IFNDEF ME_COMPILER_HAS_SYNC
ME_COMPILER_HAS_SYNC  = 0
!ENDIF
!IFNDEF ME_COMPILER_HAS_SYNC64
ME_COMPILER_HAS_SYNC64 = 0
!ENDIF
!IFNDEF ME_COMPILER_HAS_SYNC_CAS
ME_COMPILER_HAS_SYNC_CAS = 0
!ENDIF
!IFNDEF ME_COMPILER_HAS_UNNAMED_UNIONS
ME_COMPILER_HAS_UNNAMED_UNIONS = 1
!ENDIF
!IFNDEF ME_CONFIGURE
ME_CONFIGURE          = \"me -d -q -platform windows-x64-default -configure . -gen nmake\"
!ENDIF
!IFNDEF ME_CONFIGURED
ME_CONFIGURED         = 1
!ENDIF
!IFNDEF ME_DEBUG
ME_DEBUG              = 1
!ENDIF
!IFNDEF ME_DEPTH
ME_DEPTH              = 1
!ENDIF
!IFNDEF ME_DESCRIPTION
ME_DESCRIPTION        = \"Ioto Device agent\"
!ENDIF
!IFNDEF ME_GROUP
ME_GROUP              = \"ioto\"
!ENDIF
!IFNDEF ME_MANIFEST
ME_MANIFEST           = \"installs/manifest.me\"
!ENDIF
!IFNDEF ME_NAME
ME_NAME               = \"ioto\"
!ENDIF
!IFNDEF ME_PARTS
ME_PARTS              = \"undefined\"
!ENDIF
!IFNDEF ME_PLATFORMS
ME_PLATFORMS          = \"local\"
!ENDIF
!IFNDEF ME_PREFIXES
ME_PREFIXES           = \"install-prefixes\"
!ENDIF
!IFNDEF ME_PROFILE
ME_PROFILE            = \"dev\"
!ENDIF
!IFNDEF ME_STATIC
ME_STATIC             = 1
!ENDIF
!IFNDEF ME_TITLE
ME_TITLE              = \"Ioto\"
!ENDIF
!IFNDEF ME_TLS
ME_TLS                = \"openssl\"
!ENDIF
!IFNDEF ME_TUNE
ME_TUNE               = \"size\"
!ENDIF
!IFNDEF ME_USER
ME_USER               = \"ioto\"
!ENDIF
!IFNDEF ME_VERSION
ME_VERSION            = \"1.0.0\"
!ENDIF
!IFNDEF ME_WEB_AUTH
ME_WEB_AUTH           = 1
!ENDIF
!IFNDEF ME_WEB_LIMITS
ME_WEB_LIMITS         = 1
!ENDIF
!IFNDEF ME_WEB_SESSIONS
ME_WEB_SESSIONS       = 1
!ENDIF
!IFNDEF ME_WEB_UPLOAD
ME_WEB_UPLOAD         = 1
!ENDIF
!IFNDEF ME_WEB_GROUP
ME_WEB_GROUP          = \"$(WEB_GROUP)\"
!ENDIF
!IFNDEF ME_WEB_USER
ME_WEB_USER           = \"$(WEB_USER)\"
!ENDIF

!IFNDEF CC
CC                    = cl
!ENDIF

!IFNDEF LD
LD                    = link
!ENDIF

!IFNDEF AR
AR                    = lib
!ENDIF

!IFNDEF RC
RC                    = rc
!ENDIF

!IFNDEF CFLAGS
CFLAGS                = -nologo -GR- -W3 -FS -Zi -Od -MDd
!ELSE
CFLAGS                = $(CFLAGS) -nologo -GR- -W3 -FS -Zi -Od -MDd
!ENDIF

!IFNDEF DFLAGS
DFLAGS                = -DME_DEBUG=1 -D_CRT_SECURE_NO_WARNINGS=1 "-DME_COM_COMPILER=$(ME_COM_COMPILER)" "-DME_COM_LIB=$(ME_COM_LIB)" "-DME_COM_LINK=$(ME_COM_LINK)" "-DME_COM_MBEDTLS=$(ME_COM_MBEDTLS)" "-DME_COM_OPENSSL=$(ME_COM_OPENSSL)" "-DME_COM_RC=$(ME_COM_RC)" "-DME_COM_SSL=$(ME_COM_SSL)" "-DME_COM_VXWORKS=$(ME_COM_VXWORKS)" "-DME_COM_CRYPT=$(ME_COM_CRYPT)" "-DME_COM_DB=$(ME_COM_DB)" "-DME_COM_JSON=$(ME_COM_JSON)" "-DME_COM_MQTT=$(ME_COM_MQTT)" "-DME_COM_OPENAI=$(ME_COM_OPENAI)" "-DME_COM_R=$(ME_COM_R)" "-DME_COM_UCTX=$(ME_COM_UCTX)" "-DME_COM_URL=$(ME_COM_URL)" "-DME_COM_WEB=$(ME_COM_WEB)" "-DME_COM_WEBSOCK=$(ME_COM_WEBSOCK)" "-DME_WEB_AUTH=$(ME_WEB_AUTH)" "-DME_WEB_LIMITS=$(ME_WEB_LIMITS)" "-DME_WEB_SESSIONS=$(ME_WEB_SESSIONS)" "-DME_WEB_UPLOAD=$(ME_WEB_UPLOAD)" 
!ELSE
DFLAGS                = $(DFLAGS) -DME_DEBUG=1 -D_CRT_SECURE_NO_WARNINGS=1 "-DME_COM_COMPILER=$(ME_COM_COMPILER)" "-DME_COM_LIB=$(ME_COM_LIB)" "-DME_COM_LINK=$(ME_COM_LINK)" "-DME_COM_MBEDTLS=$(ME_COM_MBEDTLS)" "-DME_COM_OPENSSL=$(ME_COM_OPENSSL)" "-DME_COM_RC=$(ME_COM_RC)" "-DME_COM_SSL=$(ME_COM_SSL)" "-DME_COM_VXWORKS=$(ME_COM_VXWORKS)" "-DME_COM_CRYPT=$(ME_COM_CRYPT)" "-DME_COM_DB=$(ME_COM_DB)" "-DME_COM_JSON=$(ME_COM_JSON)" "-DME_COM_MQTT=$(ME_COM_MQTT)" "-DME_COM_OPENAI=$(ME_COM_OPENAI)" "-DME_COM_R=$(ME_COM_R)" "-DME_COM_UCTX=$(ME_COM_UCTX)" "-DME_COM_URL=$(ME_COM_URL)" "-DME_COM_WEB=$(ME_COM_WEB)" "-DME_COM_WEBSOCK=$(ME_COM_WEBSOCK)" "-DME_WEB_AUTH=$(ME_WEB_AUTH)" "-DME_WEB_LIMITS=$(ME_WEB_LIMITS)" "-DME_WEB_SESSIONS=$(ME_WEB_SESSIONS)" "-DME_WEB_UPLOAD=$(ME_WEB_UPLOAD)" 
!ENDIF

!IFNDEF IFLAGS
IFLAGS                = -I$(BUILD)/inc
!ELSE
IFLAGS                = $(IFLAGS) "-I$(BUILD)/inc"
!ENDIF

!IFNDEF LDFLAGS
LDFLAGS               = -nologo -incremental:no -dynamicbase -nxcompat -debug -machine:$(ARCH)
!ELSE
LDFLAGS               = $(LDFLAGS) -nologo -incremental:no -dynamicbase -nxcompat -debug -machine:$(ARCH)
!ENDIF

!IFNDEF LIBPATHS
LIBPATHS              = "-libpath:$(BUILD)/bin"
!ELSE
LIBPATHS              = $(LIBPATHS) "-libpath:$(BUILD)/bin"
!ENDIF

!IFNDEF LIBS
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib shell32.lib
!ELSE
LIBS                  = $(LIBS) ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib shell32.lib
!ENDIF

!IFNDEF APP
APP = unit
!ENDIF

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)/Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)/Ioto
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)/bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)/inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)/lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)/man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)/web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)/log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)/tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)/cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)/src


TARGETS               = $(TARGETS) app
TARGETS               = $(TARGETS) $(BUILD)/bin/db.exe
TARGETS               = $(TARGETS) $(BUILD)/bin/ioto.exe
TARGETS               = $(TARGETS) $(BUILD)/bin/json.exe
TARGETS               = $(TARGETS) $(BUILD)/bin/password.exe
TARGETS               = $(TARGETS) $(BUILD)/bin/url.exe
TARGETS               = $(TARGETS) $(BUILD)/bin/web.exe

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IFNDEF VSINSTALLDIR
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IFNDEF ME_APP_PREFIX
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@echo Building for $(CC_ARCH)
	@if not exist "$(BUILD)/bin" md "$(BUILD)/bin"
	@if not exist "$(BUILD)/inc" md "$(BUILD)/inc"
	@if not exist "$(BUILD)/obj" md "$(BUILD)/obj"
	@powershell -Command "Copy-Item \"projects/$(PROJECT)-me.h\" \"$(BUILD)/inc/me.h\" -ErrorAction SilentlyContinue | Out-Null"
!IF "$(SHOW)" != ""
	@echo ..... [Info] Use "make SHOW=1" to trace executed commands and errors.
LOG =
!ELSE
LOG = >nul
!ENDIF

test::
    ./bin/test-prep.bat
    tm 

clean:
	powershell -Command "if (Test-Path '$(BUILD)/obj/agent.obj') { Remove-Item '$(BUILD)/obj/agent.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/ai.obj') { Remove-Item '$(BUILD)/obj/ai.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/app.obj') { Remove-Item '$(BUILD)/obj/app.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/cloud.obj') { Remove-Item '$(BUILD)/obj/cloud.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/cloudwatch.obj') { Remove-Item '$(BUILD)/obj/cloudwatch.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/config.obj') { Remove-Item '$(BUILD)/obj/config.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/cron.obj') { Remove-Item '$(BUILD)/obj/cron.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/cryptLib.obj') { Remove-Item '$(BUILD)/obj/cryptLib.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/database.obj') { Remove-Item '$(BUILD)/obj/database.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/db.obj') { Remove-Item '$(BUILD)/obj/db.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/dbLib.obj') { Remove-Item '$(BUILD)/obj/dbLib.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/esp32.obj') { Remove-Item '$(BUILD)/obj/esp32.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/helpers.obj') { Remove-Item '$(BUILD)/obj/helpers.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/ioto.obj') { Remove-Item '$(BUILD)/obj/ioto.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/json.obj') { Remove-Item '$(BUILD)/obj/json.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/jsonLib.obj') { Remove-Item '$(BUILD)/obj/jsonLib.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/logs.obj') { Remove-Item '$(BUILD)/obj/logs.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/mqtt.obj') { Remove-Item '$(BUILD)/obj/mqtt.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/mqttLib.obj') { Remove-Item '$(BUILD)/obj/mqttLib.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/openaiLib.obj') { Remove-Item '$(BUILD)/obj/openaiLib.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/password.obj') { Remove-Item '$(BUILD)/obj/password.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/provision.obj') { Remove-Item '$(BUILD)/obj/provision.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/rLib.obj') { Remove-Item '$(BUILD)/obj/rLib.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/register.obj') { Remove-Item '$(BUILD)/obj/register.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/serialize.obj') { Remove-Item '$(BUILD)/obj/serialize.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/setup.obj') { Remove-Item '$(BUILD)/obj/setup.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/shadow.obj') { Remove-Item '$(BUILD)/obj/shadow.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/sync.obj') { Remove-Item '$(BUILD)/obj/sync.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/uctxLib.obj') { Remove-Item '$(BUILD)/obj/uctxLib.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/update.obj') { Remove-Item '$(BUILD)/obj/update.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/url.obj') { Remove-Item '$(BUILD)/obj/url.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/urlLib.obj') { Remove-Item '$(BUILD)/obj/urlLib.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/web.obj') { Remove-Item '$(BUILD)/obj/web.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/webLib.obj') { Remove-Item '$(BUILD)/obj/webLib.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/webserver.obj') { Remove-Item '$(BUILD)/obj/webserver.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/obj/websockLib.obj') { Remove-Item '$(BUILD)/obj/websockLib.obj' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/db.exe') { Remove-Item '$(BUILD)/bin/db.exe' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/db.lib') { Remove-Item '$(BUILD)/bin/db.lib' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/db.pdb') { Remove-Item '$(BUILD)/bin/db.pdb' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/db.exp') { Remove-Item '$(BUILD)/bin/db.exp' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/ioto.exe') { Remove-Item '$(BUILD)/bin/ioto.exe' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/ioto.lib') { Remove-Item '$(BUILD)/bin/ioto.lib' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/ioto.pdb') { Remove-Item '$(BUILD)/bin/ioto.pdb' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/ioto.exp') { Remove-Item '$(BUILD)/bin/ioto.exp' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/json.exe') { Remove-Item '$(BUILD)/bin/json.exe' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/json.lib') { Remove-Item '$(BUILD)/bin/json.lib' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/json.pdb') { Remove-Item '$(BUILD)/bin/json.pdb' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/json.exp') { Remove-Item '$(BUILD)/bin/json.exp' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/libioto.lib') { Remove-Item '$(BUILD)/bin/libioto.lib' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/password.exe') { Remove-Item '$(BUILD)/bin/password.exe' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/password.lib') { Remove-Item '$(BUILD)/bin/password.lib' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/password.pdb') { Remove-Item '$(BUILD)/bin/password.pdb' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/password.exp') { Remove-Item '$(BUILD)/bin/password.exp' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/url.exe') { Remove-Item '$(BUILD)/bin/url.exe' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/url.lib') { Remove-Item '$(BUILD)/bin/url.lib' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/url.pdb') { Remove-Item '$(BUILD)/bin/url.pdb' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/url.exp') { Remove-Item '$(BUILD)/bin/url.exp' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/web.exe') { Remove-Item '$(BUILD)/bin/web.exe' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/web.lib') { Remove-Item '$(BUILD)/bin/web.lib' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/web.pdb') { Remove-Item '$(BUILD)/bin/web.pdb' }"
	powershell -Command "if (Test-Path '$(BUILD)/bin/web.exp') { Remove-Item '$(BUILD)/bin/web.exp' }"
	if exist state/config rmdir /s /q state/config
	if exist include/config.h del include/config.h

#
#   app
#

app: $(DEPS_1)
	powershell -ExecutionPolicy Bypass -File bin/prepare.ps1 -APP $(APP)

#
#   config.h
#
DEPS_2 = $(DEPS_2) include/config.h

$(BUILD)/inc/config.h: $(DEPS_2)
	@echo ..... [Copy] $(BUILD)/inc/config.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/config.h\" \"$(BUILD)/inc/config.h\" -Force" $(LOG)

#
#   me.h
#

$(BUILD)/inc/me.h: $(DEPS_3)

#
#   osdep.h
#
DEPS_4 = $(DEPS_4) include/osdep.h
DEPS_4 = $(DEPS_4) $(BUILD)/inc/me.h

$(BUILD)/inc/osdep.h: $(DEPS_4)
	@echo ..... [Copy] $(BUILD)/inc/osdep.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/osdep.h\" \"$(BUILD)/inc/osdep.h\" -Force" $(LOG)

#
#   r.h
#
DEPS_5 = $(DEPS_5) include/r.h
DEPS_5 = $(DEPS_5) $(BUILD)/inc/osdep.h

$(BUILD)/inc/r.h: $(DEPS_5)
	@echo ..... [Copy] $(BUILD)/inc/r.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/r.h\" \"$(BUILD)/inc/r.h\" -Force" $(LOG)

#
#   crypt.h
#
DEPS_6 = $(DEPS_6) include/crypt.h
DEPS_6 = $(DEPS_6) $(BUILD)/inc/me.h
DEPS_6 = $(DEPS_6) $(BUILD)/inc/r.h

$(BUILD)/inc/crypt.h: $(DEPS_6)
	@echo ..... [Copy] $(BUILD)/inc/crypt.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/crypt.h\" \"$(BUILD)/inc/crypt.h\" -Force" $(LOG)

#
#   json.h
#
DEPS_7 = $(DEPS_7) include/json.h
DEPS_7 = $(DEPS_7) $(BUILD)/inc/r.h

$(BUILD)/inc/json.h: $(DEPS_7)
	@echo ..... [Copy] $(BUILD)/inc/json.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/json.h\" \"$(BUILD)/inc/json.h\" -Force" $(LOG)

#
#   db.h
#
DEPS_8 = $(DEPS_8) include/db.h
DEPS_8 = $(DEPS_8) $(BUILD)/inc/json.h

$(BUILD)/inc/db.h: $(DEPS_8)
	@echo ..... [Copy] $(BUILD)/inc/db.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/db.h\" \"$(BUILD)/inc/db.h\" -Force" $(LOG)

#
#   mqtt.h
#
DEPS_9 = $(DEPS_9) include/mqtt.h
DEPS_9 = $(DEPS_9) $(BUILD)/inc/me.h
DEPS_9 = $(DEPS_9) $(BUILD)/inc/r.h

$(BUILD)/inc/mqtt.h: $(DEPS_9)
	@echo ..... [Copy] $(BUILD)/inc/mqtt.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/mqtt.h\" \"$(BUILD)/inc/mqtt.h\" -Force" $(LOG)

#
#   websock.h
#
DEPS_10 = $(DEPS_10) include/websock.h
DEPS_10 = $(DEPS_10) $(BUILD)/inc/me.h
DEPS_10 = $(DEPS_10) $(BUILD)/inc/r.h
DEPS_10 = $(DEPS_10) $(BUILD)/inc/crypt.h
DEPS_10 = $(DEPS_10) $(BUILD)/inc/json.h

$(BUILD)/inc/websock.h: $(DEPS_10)
	@echo ..... [Copy] $(BUILD)/inc/websock.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/websock.h\" \"$(BUILD)/inc/websock.h\" -Force" $(LOG)

#
#   url.h
#
DEPS_11 = $(DEPS_11) include/url.h
DEPS_11 = $(DEPS_11) $(BUILD)/inc/me.h
DEPS_11 = $(DEPS_11) $(BUILD)/inc/r.h
DEPS_11 = $(DEPS_11) $(BUILD)/inc/json.h
DEPS_11 = $(DEPS_11) $(BUILD)/inc/websock.h

$(BUILD)/inc/url.h: $(DEPS_11)
	@echo ..... [Copy] $(BUILD)/inc/url.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/url.h\" \"$(BUILD)/inc/url.h\" -Force" $(LOG)

#
#   web.h
#
DEPS_12 = $(DEPS_12) include/web.h
DEPS_12 = $(DEPS_12) $(BUILD)/inc/me.h
DEPS_12 = $(DEPS_12) $(BUILD)/inc/r.h
DEPS_12 = $(DEPS_12) $(BUILD)/inc/json.h
DEPS_12 = $(DEPS_12) $(BUILD)/inc/crypt.h
DEPS_12 = $(DEPS_12) $(BUILD)/inc/websock.h

$(BUILD)/inc/web.h: $(DEPS_12)
	@echo ..... [Copy] $(BUILD)/inc/web.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/web.h\" \"$(BUILD)/inc/web.h\" -Force" $(LOG)

#
#   openai.h
#
DEPS_13 = $(DEPS_13) include/openai.h
DEPS_13 = $(DEPS_13) $(BUILD)/inc/me.h
DEPS_13 = $(DEPS_13) $(BUILD)/inc/r.h
DEPS_13 = $(DEPS_13) $(BUILD)/inc/json.h
DEPS_13 = $(DEPS_13) $(BUILD)/inc/url.h

$(BUILD)/inc/openai.h: $(DEPS_13)
	@echo ..... [Copy] $(BUILD)/inc/openai.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/openai.h\" \"$(BUILD)/inc/openai.h\" -Force" $(LOG)

#
#   ioto.h
#
DEPS_14 = $(DEPS_14) include/ioto.h
DEPS_14 = $(DEPS_14) $(BUILD)/inc/config.h
DEPS_14 = $(DEPS_14) $(BUILD)/inc/r.h
DEPS_14 = $(DEPS_14) $(BUILD)/inc/json.h
DEPS_14 = $(DEPS_14) $(BUILD)/inc/crypt.h
DEPS_14 = $(DEPS_14) $(BUILD)/inc/db.h
DEPS_14 = $(DEPS_14) $(BUILD)/inc/mqtt.h
DEPS_14 = $(DEPS_14) $(BUILD)/inc/url.h
DEPS_14 = $(DEPS_14) $(BUILD)/inc/web.h
DEPS_14 = $(DEPS_14) $(BUILD)/inc/websock.h
DEPS_14 = $(DEPS_14) $(BUILD)/inc/openai.h

$(BUILD)/inc/ioto.h: $(DEPS_14)
	@echo ..... [Copy] $(BUILD)/inc/ioto.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/ioto.h\" \"$(BUILD)/inc/ioto.h\" -Force" $(LOG)

#
#   uctx-defs.h
#
DEPS_15 = $(DEPS_15) include/uctx-defs.h

$(BUILD)/inc/uctx-defs.h: $(DEPS_15)
	@echo ..... [Copy] $(BUILD)/inc/uctx-defs.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/uctx-defs.h\" \"$(BUILD)/inc/uctx-defs.h\" -Force" $(LOG)

#
#   uctx-os.h
#
DEPS_16 = $(DEPS_16) include/uctx-os.h

$(BUILD)/inc/uctx-os.h: $(DEPS_16)
	@echo ..... [Copy] $(BUILD)/inc/uctx-os.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/uctx-os.h\" \"$(BUILD)/inc/uctx-os.h\" -Force" $(LOG)

#
#   uctx.h
#
DEPS_17 = $(DEPS_17) include/uctx.h
DEPS_17 = $(DEPS_17) $(BUILD)/inc/osdep.h
DEPS_17 = $(DEPS_17) $(BUILD)/inc/uctx-os.h

$(BUILD)/inc/uctx.h: $(DEPS_17)
	@echo ..... [Copy] $(BUILD)/inc/uctx.h
	powershell -Command "New-Item -Path $(BUILD)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"include/uctx.h\" \"$(BUILD)/inc/uctx.h\" -Force" $(LOG)

#
#   agent.obj
#
DEPS_18 = $(DEPS_18) $(BUILD)/inc/ioto.h

$(BUILD)/obj/agent.obj: \
    src/agent.c $(DEPS_18)
	@echo .. [Compile] $(BUILD)/obj/agent.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/agent.obj" -Fd"$(BUILD)/obj/agent.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/agent.c" $(LOG)

#
#   ai.obj
#
DEPS_19 = $(DEPS_19) $(BUILD)/inc/ioto.h

$(BUILD)/obj/ai.obj: \
    src/ai.c $(DEPS_19)
	@echo .. [Compile] $(BUILD)/obj/ai.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/ai.obj" -Fd"$(BUILD)/obj/ai.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/ai.c" $(LOG)

#
#   app.obj
#
DEPS_20 = $(DEPS_20) $(BUILD)/inc/ioto.h
DEPS_20 = $(DEPS_20) $(BUILD)/inc/config.h

$(BUILD)/obj/app.obj: \
    src/app.c $(DEPS_20)
	@echo .. [Compile] $(BUILD)/obj/app.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/app.obj" -Fd"$(BUILD)/obj/app.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/app.c" $(LOG)

#
#   cloud.obj
#
DEPS_21 = $(DEPS_21) $(BUILD)/inc/ioto.h

$(BUILD)/obj/cloud.obj: \
    src/cloud/cloud.c $(DEPS_21)
	@echo .. [Compile] $(BUILD)/obj/cloud.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/cloud.obj" -Fd"$(BUILD)/obj/cloud.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cloud/cloud.c" $(LOG)

#
#   cloudwatch.obj
#
DEPS_22 = $(DEPS_22) $(BUILD)/inc/ioto.h

$(BUILD)/obj/cloudwatch.obj: \
    src/cloud/cloudwatch.c $(DEPS_22)
	@echo .. [Compile] $(BUILD)/obj/cloudwatch.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/cloudwatch.obj" -Fd"$(BUILD)/obj/cloudwatch.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cloud/cloudwatch.c" $(LOG)

#
#   config.obj
#
DEPS_23 = $(DEPS_23) $(BUILD)/inc/ioto.h

$(BUILD)/obj/config.obj: \
    src/config.c $(DEPS_23)
	@echo .. [Compile] $(BUILD)/obj/config.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/config.obj" -Fd"$(BUILD)/obj/config.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/config.c" $(LOG)

#
#   cron.obj
#
DEPS_24 = $(DEPS_24) $(BUILD)/inc/ioto.h

$(BUILD)/obj/cron.obj: \
    src/cron.c $(DEPS_24)
	@echo .. [Compile] $(BUILD)/obj/cron.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/cron.obj" -Fd"$(BUILD)/obj/cron.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cron.c" $(LOG)

#
#   cryptLib.obj
#
DEPS_25 = $(DEPS_25) $(BUILD)/inc/crypt.h

$(BUILD)/obj/cryptLib.obj: \
    lib/cryptLib.c $(DEPS_25)
	@echo .. [Compile] $(BUILD)/obj/cryptLib.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/cryptLib.obj" -Fd"$(BUILD)/obj/cryptLib.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "lib/cryptLib.c" $(LOG)

#
#   database.obj
#
DEPS_26 = $(DEPS_26) $(BUILD)/inc/ioto.h

$(BUILD)/obj/database.obj: \
    src/database.c $(DEPS_26)
	@echo .. [Compile] $(BUILD)/obj/database.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/database.obj" -Fd"$(BUILD)/obj/database.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/database.c" $(LOG)

#
#   db.obj
#
DEPS_27 = $(DEPS_27) $(BUILD)/inc/r.h
DEPS_27 = $(DEPS_27) $(BUILD)/inc/db.h

$(BUILD)/obj/db.obj: \
    src/cmds/db.c $(DEPS_27)
	@echo .. [Compile] $(BUILD)/obj/db.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/db.obj" -Fd"$(BUILD)/obj/db.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cmds/db.c" $(LOG)

#
#   dbLib.obj
#
DEPS_28 = $(DEPS_28) $(BUILD)/inc/db.h
DEPS_28 = $(DEPS_28) $(BUILD)/inc/crypt.h

$(BUILD)/obj/dbLib.obj: \
    lib/dbLib.c $(DEPS_28)
	@echo .. [Compile] $(BUILD)/obj/dbLib.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/dbLib.obj" -Fd"$(BUILD)/obj/dbLib.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "lib/dbLib.c" $(LOG)

#
#   esp32.obj
#
DEPS_29 = $(DEPS_29) $(BUILD)/inc/ioto.h

$(BUILD)/obj/esp32.obj: \
    src/esp32.c $(DEPS_29)
	@echo .. [Compile] $(BUILD)/obj/esp32.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/esp32.obj" -Fd"$(BUILD)/obj/esp32.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/esp32.c" $(LOG)

#
#   helpers.obj
#
DEPS_30 = $(DEPS_30) $(BUILD)/inc/ioto.h

$(BUILD)/obj/helpers.obj: \
    src/cloud/helpers.c $(DEPS_30)
	@echo .. [Compile] $(BUILD)/obj/helpers.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/helpers.obj" -Fd"$(BUILD)/obj/helpers.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cloud/helpers.c" $(LOG)

#
#   ioto.obj
#
DEPS_31 = $(DEPS_31) $(BUILD)/inc/ioto.h

$(BUILD)/obj/ioto.obj: \
    src/cmds/ioto.c $(DEPS_31)
	@echo .. [Compile] $(BUILD)/obj/ioto.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/ioto.obj" -Fd"$(BUILD)/obj/ioto.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cmds/ioto.c" $(LOG)

#
#   json.obj
#
DEPS_32 = $(DEPS_32) $(BUILD)/inc/osdep.h
DEPS_32 = $(DEPS_32) $(BUILD)/inc/r.h
DEPS_32 = $(DEPS_32) $(BUILD)/inc/json.h

$(BUILD)/obj/json.obj: \
    src/cmds/json.c $(DEPS_32)
	@echo .. [Compile] $(BUILD)/obj/json.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/json.obj" -Fd"$(BUILD)/obj/json.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cmds/json.c" $(LOG)

#
#   jsonLib.obj
#
DEPS_33 = $(DEPS_33) $(BUILD)/inc/json.h

$(BUILD)/obj/jsonLib.obj: \
    lib/jsonLib.c $(DEPS_33)
	@echo .. [Compile] $(BUILD)/obj/jsonLib.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/jsonLib.obj" -Fd"$(BUILD)/obj/jsonLib.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "lib/jsonLib.c" $(LOG)

#
#   logs.obj
#
DEPS_34 = $(DEPS_34) $(BUILD)/inc/ioto.h

$(BUILD)/obj/logs.obj: \
    src/cloud/logs.c $(DEPS_34)
	@echo .. [Compile] $(BUILD)/obj/logs.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/logs.obj" -Fd"$(BUILD)/obj/logs.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cloud/logs.c" $(LOG)

#
#   mqtt.obj
#
DEPS_35 = $(DEPS_35) $(BUILD)/inc/ioto.h

$(BUILD)/obj/mqtt.obj: \
    src/mqtt.c $(DEPS_35)
	@echo .. [Compile] $(BUILD)/obj/mqtt.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/mqtt.obj" -Fd"$(BUILD)/obj/mqtt.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/mqtt.c" $(LOG)

#
#   mqttLib.obj
#
DEPS_36 = $(DEPS_36) $(BUILD)/inc/mqtt.h

$(BUILD)/obj/mqttLib.obj: \
    lib/mqttLib.c $(DEPS_36)
	@echo .. [Compile] $(BUILD)/obj/mqttLib.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/mqttLib.obj" -Fd"$(BUILD)/obj/mqttLib.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "lib/mqttLib.c" $(LOG)

#
#   openaiLib.obj
#
DEPS_37 = $(DEPS_37) $(BUILD)/inc/openai.h

$(BUILD)/obj/openaiLib.obj: \
    lib/openaiLib.c $(DEPS_37)
	@echo .. [Compile] $(BUILD)/obj/openaiLib.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/openaiLib.obj" -Fd"$(BUILD)/obj/openaiLib.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "lib/openaiLib.c" $(LOG)

#
#   password.obj
#
DEPS_38 = $(DEPS_38) $(BUILD)/inc/r.h
DEPS_38 = $(DEPS_38) $(BUILD)/inc/crypt.h
DEPS_38 = $(DEPS_38) $(BUILD)/inc/json.h

$(BUILD)/obj/password.obj: \
    src/cmds/password.c $(DEPS_38)
	@echo .. [Compile] $(BUILD)/obj/password.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/password.obj" -Fd"$(BUILD)/obj/password.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cmds/password.c" $(LOG)

#
#   provision.obj
#
DEPS_39 = $(DEPS_39) $(BUILD)/inc/ioto.h

$(BUILD)/obj/provision.obj: \
    src/cloud/provision.c $(DEPS_39)
	@echo .. [Compile] $(BUILD)/obj/provision.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/provision.obj" -Fd"$(BUILD)/obj/provision.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cloud/provision.c" $(LOG)

#
#   rLib.obj
#
DEPS_40 = $(DEPS_40) $(BUILD)/inc/r.h

$(BUILD)/obj/rLib.obj: \
    lib/rLib.c $(DEPS_40)
	@echo .. [Compile] $(BUILD)/obj/rLib.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/rLib.obj" -Fd"$(BUILD)/obj/rLib.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "lib/rLib.c" $(LOG)

#
#   register.obj
#
DEPS_41 = $(DEPS_41) $(BUILD)/inc/ioto.h

$(BUILD)/obj/register.obj: \
    src/register.c $(DEPS_41)
	@echo .. [Compile] $(BUILD)/obj/register.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/register.obj" -Fd"$(BUILD)/obj/register.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/register.c" $(LOG)

#
#   serialize.obj
#
DEPS_42 = $(DEPS_42) $(BUILD)/inc/ioto.h

$(BUILD)/obj/serialize.obj: \
    src/serialize.c $(DEPS_42)
	@echo .. [Compile] $(BUILD)/obj/serialize.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/serialize.obj" -Fd"$(BUILD)/obj/serialize.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/serialize.c" $(LOG)

#
#   setup.obj
#
DEPS_43 = $(DEPS_43) $(BUILD)/inc/ioto.h

$(BUILD)/obj/setup.obj: \
    src/setup.c $(DEPS_43)
	@echo .. [Compile] $(BUILD)/obj/setup.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/setup.obj" -Fd"$(BUILD)/obj/setup.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/setup.c" $(LOG)

#
#   shadow.obj
#
DEPS_44 = $(DEPS_44) $(BUILD)/inc/ioto.h

$(BUILD)/obj/shadow.obj: \
    src/cloud/shadow.c $(DEPS_44)
	@echo .. [Compile] $(BUILD)/obj/shadow.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/shadow.obj" -Fd"$(BUILD)/obj/shadow.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cloud/shadow.c" $(LOG)

#
#   sync.obj
#
DEPS_45 = $(DEPS_45) $(BUILD)/inc/ioto.h

$(BUILD)/obj/sync.obj: \
    src/cloud/sync.c $(DEPS_45)
	@echo .. [Compile] $(BUILD)/obj/sync.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/sync.obj" -Fd"$(BUILD)/obj/sync.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cloud/sync.c" $(LOG)

#
#   uctxLib.obj
#
DEPS_46 = $(DEPS_46) $(BUILD)/inc/uctx.h
DEPS_46 = $(DEPS_46) $(BUILD)/inc/uctx-defs.h

$(BUILD)/obj/uctxLib.obj: \
    lib/uctxLib.c $(DEPS_46)
	@echo .. [Compile] $(BUILD)/obj/uctxLib.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/uctxLib.obj" -Fd"$(BUILD)/obj/uctxLib.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "lib/uctxLib.c" $(LOG)

#
#   update.obj
#
DEPS_47 = $(DEPS_47) $(BUILD)/inc/ioto.h

$(BUILD)/obj/update.obj: \
    src/cloud/update.c $(DEPS_47)
	@echo .. [Compile] $(BUILD)/obj/update.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/update.obj" -Fd"$(BUILD)/obj/update.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cloud/update.c" $(LOG)

#
#   url.obj
#
DEPS_48 = $(DEPS_48) $(BUILD)/inc/url.h
DEPS_48 = $(DEPS_48) $(BUILD)/inc/json.h

$(BUILD)/obj/url.obj: \
    src/cmds/url.c $(DEPS_48)
	@echo .. [Compile] $(BUILD)/obj/url.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/url.obj" -Fd"$(BUILD)/obj/url.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cmds/url.c" $(LOG)

#
#   urlLib.obj
#
DEPS_49 = $(DEPS_49) $(BUILD)/inc/url.h
DEPS_49 = $(DEPS_49) $(BUILD)/inc/websock.h

$(BUILD)/obj/urlLib.obj: \
    lib/urlLib.c $(DEPS_49)
	@echo .. [Compile] $(BUILD)/obj/urlLib.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/urlLib.obj" -Fd"$(BUILD)/obj/urlLib.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "lib/urlLib.c" $(LOG)

#
#   web.obj
#
DEPS_50 = $(DEPS_50) $(BUILD)/inc/web.h

$(BUILD)/obj/web.obj: \
    src/cmds/web.c $(DEPS_50)
	@echo .. [Compile] $(BUILD)/obj/web.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/web.obj" -Fd"$(BUILD)/obj/web.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/cmds/web.c" $(LOG)

#
#   webLib.obj
#
DEPS_51 = $(DEPS_51) $(BUILD)/inc/web.h

$(BUILD)/obj/webLib.obj: \
    lib/webLib.c $(DEPS_51)
	@echo .. [Compile] $(BUILD)/obj/webLib.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/webLib.obj" -Fd"$(BUILD)/obj/webLib.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "lib/webLib.c" $(LOG)

#
#   webserver.obj
#
DEPS_52 = $(DEPS_52) $(BUILD)/inc/ioto.h

$(BUILD)/obj/webserver.obj: \
    src/webserver.c $(DEPS_52)
	@echo .. [Compile] $(BUILD)/obj/webserver.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/webserver.obj" -Fd"$(BUILD)/obj/webserver.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "src/webserver.c" $(LOG)

#
#   websockLib.obj
#
DEPS_53 = $(DEPS_53) $(BUILD)/inc/websock.h
DEPS_53 = $(DEPS_53) $(BUILD)/inc/crypt.h

$(BUILD)/obj/websockLib.obj: \
    lib/websockLib.c $(DEPS_53)
	@echo .. [Compile] $(BUILD)/obj/websockLib.obj
	"$(CC)" -c -Fo"$(BUILD)/obj/websockLib.obj" -Fd"$(BUILD)/obj/websockLib.pdb" $(CFLAGS) $(DFLAGS) "-DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH)" "-DME_COM_MBEDTLS_PATH=$(ME_COM_MBEDTLS_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)/include" "-I$(ME_COM_MBEDTLS_PATH)/include" $(INPUT) "lib/websockLib.c" $(LOG)

#
#   libioto
#
DEPS_54 = $(DEPS_54) $(BUILD)/inc/config.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/crypt.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/db.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/ioto.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/json.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/mqtt.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/openai.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/osdep.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/r.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/uctx-defs.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/uctx-os.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/uctx.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/url.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/web.h
DEPS_54 = $(DEPS_54) $(BUILD)/inc/websock.h
DEPS_54 = $(DEPS_54) $(BUILD)/obj/cryptLib.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/dbLib.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/jsonLib.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/mqttLib.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/openaiLib.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/rLib.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/uctxLib.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/urlLib.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/webLib.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/websockLib.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/agent.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/ai.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/app.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/cloud.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/cloudwatch.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/helpers.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/logs.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/provision.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/shadow.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/sync.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/update.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/config.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/cron.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/database.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/esp32.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/mqtt.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/register.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/serialize.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/setup.obj
DEPS_54 = $(DEPS_54) $(BUILD)/obj/webserver.obj

$(BUILD)/bin/libioto.lib: $(DEPS_54)
	@echo ..... [Link] $(BUILD)/bin/libioto.lib
	"$(AR)" -nologo -out:"$(BUILD)/bin/libioto.lib" $(INPUT) "$(BUILD)/obj/cryptLib.obj" "$(BUILD)/obj/dbLib.obj" "$(BUILD)/obj/jsonLib.obj" "$(BUILD)/obj/mqttLib.obj" "$(BUILD)/obj/openaiLib.obj" "$(BUILD)/obj/rLib.obj" "$(BUILD)/obj/uctxLib.obj" "$(BUILD)/obj/urlLib.obj" "$(BUILD)/obj/webLib.obj" "$(BUILD)/obj/websockLib.obj" "$(BUILD)/obj/agent.obj" "$(BUILD)/obj/ai.obj" "$(BUILD)/obj/app.obj" "$(BUILD)/obj/cloud.obj" "$(BUILD)/obj/cloudwatch.obj" "$(BUILD)/obj/helpers.obj" "$(BUILD)/obj/logs.obj" "$(BUILD)/obj/provision.obj" "$(BUILD)/obj/shadow.obj" "$(BUILD)/obj/sync.obj" "$(BUILD)/obj/update.obj" "$(BUILD)/obj/config.obj" "$(BUILD)/obj/cron.obj" "$(BUILD)/obj/database.obj" "$(BUILD)/obj/esp32.obj" "$(BUILD)/obj/mqtt.obj" "$(BUILD)/obj/register.obj" "$(BUILD)/obj/serialize.obj" "$(BUILD)/obj/setup.obj" "$(BUILD)/obj/webserver.obj" $(LOG)

#
#   db
#
DEPS_55 = $(DEPS_55) $(BUILD)/bin/libioto.lib
DEPS_55 = $(DEPS_55) $(BUILD)/obj/db.obj

LIBS_55 = $(LIBS_55) libioto.lib
!IF "$(ME_COM_MBEDTLS)" == "1"
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_55 = $(LIBS_55) mbedtls.lib
LIBPATHS_55 = $(LIBPATHS_55) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_55 = $(LIBPATHS_55) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_55 = $(LIBS_55) mbedcrypto.lib
LIBPATHS_55 = $(LIBPATHS_55) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_55 = $(LIBPATHS_55) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_55 = $(LIBS_55) mbedx509.lib
LIBPATHS_55 = $(LIBPATHS_55) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_55 = $(LIBPATHS_55) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_55 = $(LIBS_55) libssl.lib
LIBPATHS_55 = $(LIBPATHS_55) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_55 = $(LIBPATHS_55) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_55 = $(LIBS_55) libcrypto.lib
LIBPATHS_55 = $(LIBPATHS_55) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_55 = $(LIBPATHS_55) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF

$(BUILD)/bin/db.exe: $(DEPS_55)
	@echo ..... [Link] $(BUILD)/bin/db.exe
	"$(LD)" -nologo -out:"$(BUILD)/bin/db.exe" -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(INPUT) "$(BUILD)/obj/db.obj" $(LIBPATHS_55) $(LIBS_55) $(LIBS)  $(LOG)

#
#   ioto
#
DEPS_56 = $(DEPS_56) $(BUILD)/bin/libioto.lib
DEPS_56 = $(DEPS_56) $(BUILD)/obj/ioto.obj

LIBS_56 = $(LIBS_56) libioto.lib
!IF "$(ME_COM_MBEDTLS)" == "1"
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_56 = $(LIBS_56) mbedtls.lib
LIBPATHS_56 = $(LIBPATHS_56) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_56 = $(LIBPATHS_56) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_56 = $(LIBS_56) mbedcrypto.lib
LIBPATHS_56 = $(LIBPATHS_56) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_56 = $(LIBPATHS_56) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_56 = $(LIBS_56) mbedx509.lib
LIBPATHS_56 = $(LIBPATHS_56) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_56 = $(LIBPATHS_56) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_56 = $(LIBS_56) libssl.lib
LIBPATHS_56 = $(LIBPATHS_56) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_56 = $(LIBPATHS_56) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_56 = $(LIBS_56) libcrypto.lib
LIBPATHS_56 = $(LIBPATHS_56) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_56 = $(LIBPATHS_56) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF

$(BUILD)/bin/ioto.exe: $(DEPS_56)
	@echo ..... [Link] $(BUILD)/bin/ioto.exe
	"$(LD)" -nologo -out:"$(BUILD)/bin/ioto.exe" -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(INPUT) "$(BUILD)/obj/ioto.obj" $(LIBPATHS_56) $(LIBS_56) $(LIBS)  $(LOG)

#
#   json
#
DEPS_57 = $(DEPS_57) $(BUILD)/bin/libioto.lib
DEPS_57 = $(DEPS_57) $(BUILD)/obj/json.obj

LIBS_57 = $(LIBS_57) libioto.lib
!IF "$(ME_COM_MBEDTLS)" == "1"
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_57 = $(LIBS_57) mbedtls.lib
LIBPATHS_57 = $(LIBPATHS_57) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_57 = $(LIBPATHS_57) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_57 = $(LIBS_57) mbedcrypto.lib
LIBPATHS_57 = $(LIBPATHS_57) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_57 = $(LIBPATHS_57) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_57 = $(LIBS_57) mbedx509.lib
LIBPATHS_57 = $(LIBPATHS_57) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_57 = $(LIBPATHS_57) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_57 = $(LIBS_57) libssl.lib
LIBPATHS_57 = $(LIBPATHS_57) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_57 = $(LIBPATHS_57) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_57 = $(LIBS_57) libcrypto.lib
LIBPATHS_57 = $(LIBPATHS_57) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_57 = $(LIBPATHS_57) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF

$(BUILD)/bin/json.exe: $(DEPS_57)
	@echo ..... [Link] $(BUILD)/bin/json.exe
	"$(LD)" -nologo -out:"$(BUILD)/bin/json.exe" -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(INPUT) "$(BUILD)/obj/json.obj" $(LIBPATHS_57) $(LIBS_57) $(LIBS)  $(LOG)

#
#   password
#
DEPS_58 = $(DEPS_58) $(BUILD)/bin/libioto.lib
DEPS_58 = $(DEPS_58) $(BUILD)/obj/password.obj

LIBS_58 = $(LIBS_58) libioto.lib
!IF "$(ME_COM_MBEDTLS)" == "1"
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_58 = $(LIBS_58) mbedtls.lib
LIBPATHS_58 = $(LIBPATHS_58) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_58 = $(LIBPATHS_58) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_58 = $(LIBS_58) mbedcrypto.lib
LIBPATHS_58 = $(LIBPATHS_58) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_58 = $(LIBPATHS_58) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_58 = $(LIBS_58) mbedx509.lib
LIBPATHS_58 = $(LIBPATHS_58) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_58 = $(LIBPATHS_58) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_58 = $(LIBS_58) libssl.lib
LIBPATHS_58 = $(LIBPATHS_58) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_58 = $(LIBPATHS_58) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_58 = $(LIBS_58) libcrypto.lib
LIBPATHS_58 = $(LIBPATHS_58) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_58 = $(LIBPATHS_58) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF

$(BUILD)/bin/password.exe: $(DEPS_58)
	@echo ..... [Link] $(BUILD)/bin/password.exe
	"$(LD)" -nologo -out:"$(BUILD)/bin/password.exe" -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(INPUT) "$(BUILD)/obj/password.obj" $(LIBPATHS_58) $(LIBS_58) $(LIBS)  $(LOG)

#
#   url
#
DEPS_59 = $(DEPS_59) $(BUILD)/bin/libioto.lib
DEPS_59 = $(DEPS_59) $(BUILD)/obj/url.obj

LIBS_59 = $(LIBS_59) libioto.lib
!IF "$(ME_COM_MBEDTLS)" == "1"
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_59 = $(LIBS_59) mbedtls.lib
LIBPATHS_59 = $(LIBPATHS_59) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_59 = $(LIBPATHS_59) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_59 = $(LIBS_59) mbedcrypto.lib
LIBPATHS_59 = $(LIBPATHS_59) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_59 = $(LIBPATHS_59) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_59 = $(LIBS_59) mbedx509.lib
LIBPATHS_59 = $(LIBPATHS_59) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_59 = $(LIBPATHS_59) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_59 = $(LIBS_59) libssl.lib
LIBPATHS_59 = $(LIBPATHS_59) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_59 = $(LIBPATHS_59) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_59 = $(LIBS_59) libcrypto.lib
LIBPATHS_59 = $(LIBPATHS_59) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_59 = $(LIBPATHS_59) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF

$(BUILD)/bin/url.exe: $(DEPS_59)
	@echo ..... [Link] $(BUILD)/bin/url.exe
	"$(LD)" -nologo -out:"$(BUILD)/bin/url.exe" -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(INPUT) "$(BUILD)/obj/url.obj" $(LIBPATHS_59) $(LIBS_59) $(LIBS)  $(LOG)

#
#   web
#
DEPS_60 = $(DEPS_60) $(BUILD)/bin/libioto.lib
DEPS_60 = $(DEPS_60) $(BUILD)/obj/web.obj

LIBS_60 = $(LIBS_60) libioto.lib
!IF "$(ME_COM_MBEDTLS)" == "1"
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_60 = $(LIBS_60) mbedtls.lib
LIBPATHS_60 = $(LIBPATHS_60) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_60 = $(LIBPATHS_60) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_60 = $(LIBS_60) mbedcrypto.lib
LIBPATHS_60 = $(LIBPATHS_60) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_60 = $(LIBPATHS_60) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_60 = $(LIBS_60) mbedx509.lib
LIBPATHS_60 = $(LIBPATHS_60) "-libpath:$(ME_COM_MBEDTLS_PATH)/lib"
LIBPATHS_60 = $(LIBPATHS_60) "-libpath:$(ME_COM_MBEDTLS_PATH)/library"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_60 = $(LIBS_60) libssl.lib
LIBPATHS_60 = $(LIBPATHS_60) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_60 = $(LIBPATHS_60) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_60 = $(LIBS_60) libcrypto.lib
LIBPATHS_60 = $(LIBPATHS_60) "-libpath:$(ME_COM_OPENSSL_PATH)"
LIBPATHS_60 = $(LIBPATHS_60) "-libpath:$(ME_COM_OPENSSL_PATH)/lib"
!ENDIF

$(BUILD)/bin/web.exe: $(DEPS_60)
	@echo ..... [Link] $(BUILD)/bin/web.exe
	"$(LD)" -nologo -out:"$(BUILD)/bin/web.exe" -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(INPUT) "$(BUILD)/obj/web.obj" $(LIBPATHS_60) $(LIBS_60) $(LIBS)  $(LOG)

#
#   stop
#

stop: $(DEPS_61)
#  Omit build script stop

#
#   installBinary
#

installBinary: $(DEPS_62)
	powershell -Command "New-Item -Path $(ME_VAPP_PREFIX)/bin -ItemType Directory -Force | Out-Null"
	powershell -Command "New-Item -Path /var/lib/ioto -ItemType Directory -Force | Out-Null"
	powershell -Command "New-Item -Path $(ME_VAPP_PREFIX)/bin -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"installs/uninstall.sh\" \"$(ME_VAPP_PREFIX)/bin/uninstall\" -Force" $(LOG)
	powershell -Command "New-Item -Path $(ME_VAPP_PREFIX)/certs -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"certs/roots.crt\" \"$(ME_VAPP_PREFIX)/certs/roots.crt\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/test.ans\" \"$(ME_VAPP_PREFIX)/certs/test.ans\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/test.crt\" \"$(ME_VAPP_PREFIX)/certs/test.crt\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/test.csr\" \"$(ME_VAPP_PREFIX)/certs/test.csr\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/test.key\" \"$(ME_VAPP_PREFIX)/certs/test.key\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ec.ans\" \"$(ME_VAPP_PREFIX)/certs/ec.ans\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ec.crt\" \"$(ME_VAPP_PREFIX)/certs/ec.crt\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ec.csr\" \"$(ME_VAPP_PREFIX)/certs/ec.csr\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ec.key\" \"$(ME_VAPP_PREFIX)/certs/ec.key\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ca.crt\" \"$(ME_VAPP_PREFIX)/certs/ca.crt\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ca.db\" \"$(ME_VAPP_PREFIX)/certs/ca.db\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ca.db.attr\" \"$(ME_VAPP_PREFIX)/certs/ca.db.attr\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ca.db.old\" \"$(ME_VAPP_PREFIX)/certs/ca.db.old\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ca.key\" \"$(ME_VAPP_PREFIX)/certs/ca.key\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ca.srl\" \"$(ME_VAPP_PREFIX)/certs/ca.srl\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/ca.srl.old\" \"$(ME_VAPP_PREFIX)/certs/ca.srl.old\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/self.ans\" \"$(ME_VAPP_PREFIX)/certs/self.ans\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/self.crt\" \"$(ME_VAPP_PREFIX)/certs/self.crt\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/self.key\" \"$(ME_VAPP_PREFIX)/certs/self.key\" -Force" $(LOG)
	powershell -Command "Copy-Item \"certs/aws.crt\" \"$(ME_VAPP_PREFIX)/certs/aws.crt\" -Force" $(LOG)
	powershell -Command "New-Item -Path $(ME_VAPP_PREFIX)/bin/scripts -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"scripts/update\" \"$(ME_VAPP_PREFIX)/bin/scripts/update\" -Force" $(LOG)
	powershell -Command "New-Item -Path $(ME_VAPP_PREFIX)/web -ItemType Directory -Force"
	powershell -Command "Copy-Item \"state/site/*\" \"$(ME_VAPP_PREFIX)/web\" -Recurse -Force"
	powershell -Command "New-Item -Path $(ME_VAPP_PREFIX) -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"state/config/db.json5\" \"$(ME_VAPP_PREFIX)/db.json5\" -Force" $(LOG)
	powershell -Command "Copy-Item \"state/config/device.json5\" \"$(ME_VAPP_PREFIX)/device.json5\" -Force" $(LOG)
	powershell -Command "Copy-Item \"state/config/schema.json5\" \"$(ME_VAPP_PREFIX)/schema.json5\" -Force" $(LOG)
	powershell -Command "Copy-Item \"state/config/web.json5\" \"$(ME_VAPP_PREFIX)/web.json5\" -Force" $(LOG)
	powershell -Command "New-Item -Path $(ME_VAPP_PREFIX) -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"state/config/ioto.json5\" \"$(ME_VAPP_PREFIX)/ioto.json5\" -Force" $(LOG)
	powershell -Command "New-Item -Path "$(ME_VAPP_PREFIX)/lib/db" -ItemType Directory -Force"
	powershell -Command "New-Item -Path $(ME_VAPP_PREFIX)/bin -ItemType Directory -Force | Out-Null"
	powershell -Command "New-Item -Path $(ME_VAPP_PREFIX)/inc -ItemType Directory -Force | Out-Null"
	powershell -Command "Copy-Item \"$(BUILD)/inc/me.h\" \"$(ME_VAPP_PREFIX)/inc/me.h\" -Force" $(LOG)

#
#   start
#

start: $(DEPS_63)
#  Omit build script start

#
#   install
#
DEPS_64 = $(DEPS_64) stop
DEPS_64 = $(DEPS_64) installBinary
DEPS_64 = $(DEPS_64) start

install: $(DEPS_64)
	echo "      [Info] Ioto installed at $(ME_VAPP_PREFIX)"
	echo "      [Info] Configuration directory $(ME_VAPP_PREFIX)"
	echo "      [Info] Documents directory $(ME_VAPP_PREFIX)/web"
	echo "      [Info] Executables directory $(ME_VAPP_PREFIX)/bin"
	echo '      [Info] Use "man ioto" for usage'
	echo "      [Info] Run via 'cd $(ME_VAPP_PREFIX) ; sudo ioto'"
	bin/json --overwrite profile=prod /etc/ioto/ioto.json5

#
#   installPrep
#

installPrep: $(DEPS_65)
#  Omit build script installPrep

#
#   uninstall
#
DEPS_66 = $(DEPS_66) stop

uninstall: $(DEPS_66)
	cd installs
	powershell -Command "if (Test-Path '$(ME_VAPP_PREFIX)/appweb.conf') { Remove-Item '$(ME_VAPP_PREFIX)/appweb.conf' }"
	powershell -Command "if (Test-Path '$(ME_VAPP_PREFIX)/esp.conf') { Remove-Item '$(ME_VAPP_PREFIX)/esp.conf' }"
	powershell -Command "if (Test-Path '$(ME_VAPP_PREFIX)/mine.types') { Remove-Item '$(ME_VAPP_PREFIX)/mine.types' }"
	powershell -Command "if (Test-Path '$(ME_VAPP_PREFIX)/install.conf') { Remove-Item '$(ME_VAPP_PREFIX)/install.conf' }"
	if exist "$(ME_VAPP_PREFIX)/inc/ioto" rd /Q /S "$(ME_VAPP_PREFIX)/inc/ioto"
	cd ..

#
#   uninstallBinary
#

uninstallBinary: $(DEPS_67)
#  Omit build script uninstallBinary

